{"version":3,"sources":["Micro.tsx","App.tsx","ChatBackend.ts","registerServiceWorker.js","index.js"],"names":["Micro","allowance","initialized","postMessage","data","window","ReactNativeWebView","canHandleWithMicro","amount","_this","handleWithMicro","invoice","_this2","this","document","addEventListener","_ref","rawData","toLowerCase","startsWith","newAllowance","substring","length","parseInt","moniker","localStorage","getItem","generateName","setItem","backend","ChatBackend","Object","classCallCheck","endpoint","socket","url","path","getInvoice","asyncToGenerator","regenerator_default","a","mark","_callee","memo","response","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","_x","apply","arguments","onUpdateBoltheadCounter","fn","on","onSatoshiCounter","onNewMessage","onInitialMessages","onSettled","onceMyNewMessage","once","onNodeAddress","newMessage","msg","emit","getUri","_callee2","_context2","io","micro","updateVh","vh","innerHeight","documentElement","style","setProperty","concat","App","props","possibleConstructorReturn","getPrototypeOf","call","_handleAddMessage","e","preventDefault","id","nickname","settled","message","state","withMicro","newmsg","setState","messages","c","boltheadCounter","toConsumableArray","u","uri","msgs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","i","value","err","return","satoshiCounter","init","_this3","react_default","createElement","className","map","m","key","qrcode_react_lib_default","size","href","onSubmit","type","onChange","event","target","placeholder","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2c218f14.chunk.js","sourcesContent":["export default class Micro {\n  allowance: number = 0;\n  initialized: boolean = false;\n\n  init() {\n    document.addEventListener(\"message\", ({ data: rawData }: any) => {\n      if (!rawData) return;\n      let data = rawData.toLowerCase();\n      const appAllowancePrefix = \"appallowance:\";\n      if (data == \"initmicro\") {\n        this.initialized = true;\n        this.postMessage(\"initmicroack\");\n      } else if (data.startsWith(appAllowancePrefix)) {\n        let newAllowance = data.substring(appAllowancePrefix.length);\n        this.allowance = parseInt(newAllowance);\n      }\n    });\n  }\n\n  postMessage = function(data) {\n    // @ts-ignore\n    window.ReactNativeWebView.postMessage(data);\n  };\n\n  canHandleWithMicro = (amount: number) => {\n    if (this.initialized && this.allowance > amount) {\n      return true;\n    }\n    return false;\n  };\n\n  handleWithMicro = (invoice: string, amount: number) => {\n    if (this.canHandleWithMicro(amount)) {\n      this.postMessage(\"lightning:\" + invoice);\n      return true;\n    }\n    return false;\n  };\n}\n","import React, { Component } from \"react\";\nimport generateName from \"sillyname\";\nimport ChatBackend from \"./ChatBackend\";\nimport QRCode from \"qrcode.react\";\n\nimport \"./App.css\";\nimport Micro from \"./Micro\";\nimport Message from \"./Message\";\n\nlet moniker = \"\";\nif (localStorage && localStorage.getItem(\"chatMoniker\")) {\n  moniker = localStorage.getItem(\"chatMoniker\") || \"\";\n} else {\n  moniker = generateName();\n  localStorage.setItem(\"chatMoniker\", moniker);\n}\n\nconst backend = new ChatBackend();\nconst micro = new Micro();\n\nconst updateVh = () => {\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n};\n\nupdateVh();\nwindow.addEventListener(\"resize\", updateVh);\n\nexport interface Props {}\n\ninterface State {\n  message: string;\n  uri?: string;\n  messages: Message[];\n  boltheadCounter?: number;\n  satoshiCounter?: number;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { message: \"\", messages: [] };\n  }\n\n  componentDidMount() {\n    // this._getUri();\n    backend.onUpdateBoltheadCounter(c => this.setState({ boltheadCounter: c }));\n    backend.onNewMessage((msg: Message) =>\n      this.setState({ messages: [...this.state.messages, msg] })\n    );\n    backend.onInitialMessages((msg: Message[]) =>\n      this.setState({ messages: msg })\n    );\n    backend.onNodeAddress(u => this.setState({ uri: u }));\n    backend.onSettled((id: number) => {\n      if (!id) return;\n      const msgs = this.state.messages;\n      for (let i of msgs) {\n        if (i.id == id) {\n          i.settled = true;\n          break;\n        }\n      }\n      this.setState({ messages: msgs });\n    });\n    backend.onSatoshiCounter(c => this.setState({ satoshiCounter: c }));\n    micro.init();\n  }\n\n  _handleAddMessage = async e => {\n    e.preventDefault();\n    backend.newMessage({\n      id: -1, // doesn't matter, backend will set it.\n      nickname: moniker,\n      settled: false,\n      message: this.state.message,\n      invoice: \"\",\n      withMicro: micro.canHandleWithMicro(10)\n    });\n    backend.onceMyNewMessage((newmsg: Message) => {\n      micro.handleWithMicro(newmsg.invoice, 10);\n    });\n    this.setState({ message: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <div className=\"App-moniker pa3-l pa2 sans-serif\">\n            <span className=\"f3-l f4-m f5 sans-serif logo-text b\">\n              rawtx chat\n            </span>\n            <span className=\"logo-text f4-l f5-m f6 pl2\">\n              - lightning enabled chat app.\n            </span>\n            <span className=\"slogan-text f4-l f5-m f6 pt2 pl2 b\">\n              10 satoshis per message (testnet).\n            </span>\n            <div className=\"slogan-text f4-l f5-m f6 pt2\">\n              Your nickname is: {moniker}\n            </div>\n            <div className=\"counter ma1 mt2 pa1 pb0 ml0\">\n              <div className=\"dot\" />\n              <div className=\"ml2 logo-text f4-l f5-m f6 b\">\n                {this.state.boltheadCounter || 0} boltheads online right now\n              </div>\n            </div>\n            <div className=\"counter pa1 ml0\">\n              <div className=\"dot green-dot\" />\n              <div className=\"ml2 logo-text f4-l f5-m f6 b green-text\">\n                {this.state.satoshiCounter || 0} satoshis spent\n              </div>\n            </div>\n          </div>\n          <div className=\"App-messages pa2 pb0\">\n            <div>\n              {this.state.messages &&\n                this.state.messages.map((m, i) => (\n                  <p key={i}>\n                    <div className=\"f5-ns f6\">\n                      <b>{m.nickname}</b>\n                    </div>\n                    <div className=\"pa3-l pa2 ma1 ml0 mr0 br4 message-container f5-l f6-m f7\">\n                      {m.settled ? m.message : <i>Awaiting payment...</i>}\n                      {m.nickname == moniker && !m.settled && !m.withMicro ? (\n                        <span>\n                          <br />\n                          <div className=\"mt2\">\n                            <b>Your payment request</b>\n                          </div>\n                          <QRCode value={m.invoice} size={256} />\n                          <br />\n                          <div className=\"mv1\">\n                            <a href={\"lightning:\" + m.invoice} className=\"link\">\n                              {m.invoice}\n                            </a>\n                          </div>\n                          <br />\n                          <b>rawtx chat node's address</b>\n                          <br />\n                          <QRCode value={this.state.uri || \"\"} />\n                          <div>{this.state.uri}</div>\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                      {m.nickname == moniker && m.withMicro && !m.settled ? (\n                        <span>\n                          <br />\n                          Settling payment with micro\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                  </p>\n                ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"form-container\">\n          <form onSubmit={this._handleAddMessage}>\n            <div className=\"message-form\">\n              <div className=\"App-message-entry\">\n                <input\n                  type=\"text\"\n                  value={this.state.message}\n                  onChange={event =>\n                    this.setState({ message: event.target.value })\n                  }\n                  placeholder=\"Message...\"\n                  className=\"pa3-l ma2-l w-100 f3-l pa2 ma1 f4\"\n                />\n              </div>\n              <div className=\"App-submit-button ma3-l f3-l ma2 f4\">\n                <input type=\"submit\" value=\"Send\" />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import io from \"socket.io-client\";\nimport Message from \"./Message\";\n\nexport default class ChatBackend {\n  endpoint: string;\n  socket: SocketIOClient.Socket;\n  constructor() {\n    if (process.env.NODE_ENV && process.env.NODE_ENV === \"development\") {\n      this.endpoint = \"http://10.0.2.2:3001\";\n    } else {\n      this.endpoint = \"https://chat-backend.rawtx.com\";\n    }\n    this.endpoint = \"https://chat-backend.rawtx.com\";\n    this.socket = io(this.endpoint);\n  }\n\n  url = path => {\n    return this.endpoint + \"/\" + path;\n  };\n\n  getInvoice = async (memo: string) => {\n    const response = await fetch(this.url(\"invoice/\" + memo));\n    return response.json();\n  };\n\n  onUpdateBoltheadCounter = (fn: Function) => {\n    this.socket.on(\"updateBoltheadCounter\", fn);\n  };\n\n  onSatoshiCounter = (fn: Function) => {\n    this.socket.on(\"satoshiCounter\", fn);\n  };\n\n  onNewMessage = (fn: Function) => {\n    this.socket.on(\"newMessage\", fn);\n  };\n\n  onInitialMessages = (fn: Function) => {\n    this.socket.on(\"initialMessages\", fn);\n  };\n\n  onSettled = (fn: Function) => {\n    this.socket.on(\"settled\", fn);\n  };\n\n  onceMyNewMessage = (fn: Function) => {\n    this.socket.once(\"yourNewMessage\", fn);\n  };\n\n  onNodeAddress = (fn: Function) => {\n    this.socket.on(\"nodeAddress\", fn);\n  };\n\n  newMessage = (msg: Message) => {\n    this.socket.emit(\"newMessage\", msg);\n  };\n\n  getUri = async () => {\n    const response = await fetch(this.url(\"pubkey\"));\n    const json = await response.json();\n    return json[\"uri\"];\n  };\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}