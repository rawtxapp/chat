{"version":3,"sources":["Micro.tsx","App.tsx","ChatBackend.ts","registerServiceWorker.js","index.js"],"names":["Micro","allowance","initialized","canHandleWithMicro","amount","_this","handleWithMicro","invoice","window","postMessage","_this2","this","document","addEventListener","_ref","rawData","data","toLowerCase","startsWith","newAllowance","substring","length","parseInt","moniker","localStorage","getItem","generateName","setItem","backend","ChatBackend","Object","classCallCheck","endpoint","socket","url","path","getInvoice","asyncToGenerator","regenerator_default","a","mark","_callee","memo","response","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","_x","apply","arguments","onUpdateBoltheadCounter","fn","on","onNewMessage","onInitialMessages","newMessage","msg","emit","getUri","_callee2","_context2","io","micro","App","props","possibleConstructorReturn","getPrototypeOf","call","_getUri","uri","setState","_handleAddMessage","_ref2","e","preventDefault","nickname","settled","message","state","withMicro","messages","c","boltheadCounter","concat","toConsumableArray","init","_this3","react_default","createElement","className","map","m","i","key","href","qrcode_react_lib_default","value","size","onSubmit","type","onChange","event","target","placeholder","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9b18ecb5.chunk.js","sourcesContent":["export default class Micro {\n  allowance : number = 0;\n  initialized : boolean = false;\n\n  init() {\n    document.addEventListener(\"message\", ({ data: rawData }:any) => {\n      if (!rawData) return;\n      let data = rawData.toLowerCase();\n      const appAllowancePrefix = \"appallowance:\";\n      if (data == \"initmicro\") {\n        this.initialized = true;\n        window.postMessage(\"initmicroack\", \"*\");\n      } else if (data.startsWith(appAllowancePrefix)) {\n        let newAllowance = data.substring(appAllowancePrefix.length);\n        this.allowance = parseInt(newAllowance);\n      }\n    });\n  };\n\n  canHandleWithMicro = (amount: number) => {\n    if (this.initialized && this.allowance > amount) {\n      return true;\n    }\n    return false;\n  };\n\n  handleWithMicro = (invoice: string, amount: number) => {\n    if (this.canHandleWithMicro(amount)) {\n      window.postMessage(\"lightning:\" + invoice, \"*\");\n      return true;\n    }\n    return false;\n  };\n}\n","import React, { Component } from \"react\";\nimport generateName from \"sillyname\";\nimport ChatBackend from \"./ChatBackend\";\nimport QRCode from \"qrcode.react\";\n\nimport \"./App.css\";\nimport Micro from \"./Micro\";\nimport Message from \"./Message\";\n\nlet moniker = \"\";\nif (localStorage && localStorage.getItem(\"chatMoniker\")) {\n  moniker = localStorage.getItem(\"chatMoniker\") || \"\";\n} else {\n  moniker = generateName();\n  localStorage.setItem(\"chatMoniker\", moniker);\n}\n\nconst backend = new ChatBackend();\nconst micro = new Micro();\n\nexport interface Props {\n\n}\n\ninterface State {\n  message: string;\n  uri?: string;\n  messages: Message[];\n  boltheadCounter?: number;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { message: \"\", messages: [] };\n  }\n\n  componentDidMount() {\n    // this._getUri();\n    backend.onUpdateBoltheadCounter((c) => this.setState({ boltheadCounter: c }));\n    backend.onNewMessage((msg: Message) =>\n      this.setState({ messages: [...this.state.messages, msg] }));\n    backend.onInitialMessages((msg: Message[]) => this.setState({ messages: msg }));\n    micro.init();\n  }\n\n  _getUri = async () => {\n    const uri = await backend.getUri();\n    this.setState({ uri });\n  };\n\n  _handleAddMessage = async e => {\n    e.preventDefault();\n    backend.newMessage({\n      nickname: moniker,\n      settled: false,\n      message: this.state.message,\n      invoice: \"\",\n      withMicro: false\n    });\n    // const memo = this.state.message.substr(0, 100);\n    // if (memo.trim() == \"\") {\n    //   return;\n    // }\n    // let invoice = \"\";\n    // try {\n    //   invoice = await backend.getInvoice(memo);\n    // } catch (err) {\n    //   console.error(err);\n    //   return;\n    // }\n\n    // this.setState({ message: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <div className=\"App-moniker pa3 sans-serif\">\n            <span className=\"f3 sans-serif logo-text b\">rawtx chat</span>\n            <span className=\"logo-text f4 pl2\">\n              - lightning enabled chat app.\n            </span>\n            <span className=\"slogan-text f4 pt2 pl2 b\">\n              10 satoshis per message.\n            </span>\n            <div className=\"slogan-text f4 pt2\">\n              Your nickname is: {moniker}\n            </div>\n            <div className=\"counter ma1 mt2 pa1 pb0 ml0\">\n              <div className=\"dot\"></div>\n              <div className=\"ml2 logo-text f4 b\">\n                {this.state.boltheadCounter || 0} boltheads online right now\n              </div>\n            </div>\n            <div className=\"counter pa1 ml0\">\n              <div className=\"dot green-dot\"></div>\n              <div className=\"ml2 logo-text f4 b green-text\">0 satoshis spent</div>\n            </div>\n          </div>\n          <div className=\"App-messages\">\n            <div>\n              {this.state.messages &&\n                this.state.messages.map((m, i) => (\n                  <p key={i}>\n                    <div><b>{m.nickname}</b></div>\n                    <div className=\"pa3 ma1 ml0 mr0 br4 message-container\">\n                      {m.settled ? m.message : <i>Awaiting payment...</i>}\n                      {m.nickname == moniker && !m.settled && !m.withMicro ? (\n                        <span>\n                          <br />\n                          <b>Your payment request:</b>\n                          <br />\n                          <a href={\"lightning:\" + m.invoice}>{m.invoice}</a>\n                          <br />\n                          <QRCode value={m.invoice} size={256} />\n                          <br />\n                          <b>The node's address is:</b>\n                          <br />\n                          {this.state.uri}\n                          <br />\n                          <QRCode value={this.state.uri || \"\"} />\n                        </span>\n                      ) : (\n                          \"\"\n                        )}\n                      {m.nickname == moniker && m.withMicro && !m.settled ? (\n                        <span>\n                          <br />\n                          Settling payment with micro\n                      </span>\n                      ) : (\n                          \"\"\n                        )}\n                    </div>\n                  </p>\n                ))}\n            </div>\n          </div>\n        </div>\n        <div>\n          <form onSubmit={this._handleAddMessage}>\n            <div className=\"message-form\">\n              <div className=\"App-message-entry\">\n                <input\n                  type=\"text\"\n                  value={this.state.message}\n                  onChange={event =>\n                    this.setState({ message: event.target.value })\n                  }\n                  placeholder=\"Message...\"\n                  className=\"pa3 ma2 w-100\"\n                />\n              </div>\n              <div className=\"App-submit-button ma3\">\n                <input type=\"submit\" value=\"Send\" />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import io from 'socket.io-client';\nimport Message from './Message';\n\nexport default class ChatBackend {\n  endpoint: string;\n  socket: SocketIOClient.Socket;\n  constructor() {\n    if (\n      process.env.NODE_ENV &&\n      process.env.NODE_ENV === \"development\"\n    ) {\n      this.endpoint = \"http://localhost:3001\";\n    } else {\n      this.endpoint = \"https://chat-backend.rawtx.com:9090\";\n    }\n    this.socket = io(this.endpoint);\n  }\n\n  url = path => {\n    return this.endpoint + \"/\" + path;\n  };\n\n  getInvoice = async (memo:string) => {\n    const response = await fetch(this.url(\"invoice/\" + memo));\n    return response.json();\n  };\n\n  onUpdateBoltheadCounter = (fn: Function) => {\n    this.socket.on('updateBoltheadCounter', fn);\n  }\n\n  onNewMessage = (fn:Function) => {\n    this.socket.on('newMessage', fn);\n  }\n\n  onInitialMessages = (fn:Function) => {\n    this.socket.on('initialMessages', fn);\n  }\n\n  newMessage = (msg: Message) => {\n    this.socket.emit('newMessage', msg);\n  }\n\n  getUri = async () => {\n    const response = await fetch(this.url(\"pubkey\"));\n    const json = await response.json();\n    return json[\"uri\"];\n  };\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}