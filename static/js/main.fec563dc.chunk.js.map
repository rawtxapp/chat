{"version":3,"sources":["Micro.tsx","App.tsx","ChatBackend.ts","registerServiceWorker.js","index.js"],"names":["Micro","allowance","initialized","canHandleWithMicro","amount","_this","handleWithMicro","invoice","window","postMessage","_this2","this","document","addEventListener","_ref","rawData","data","toLowerCase","startsWith","newAllowance","substring","length","parseInt","moniker","localStorage","getItem","generateName","setItem","backend","ChatBackend","Object","classCallCheck","endpoint","socket","url","path","getInvoice","asyncToGenerator","regenerator_default","a","mark","_callee","memo","response","wrap","_context","prev","next","fetch","sent","abrupt","json","stop","_x","apply","arguments","onUpdateBoltheadCounter","fn","on","onSatoshiCounter","onNewMessage","onInitialMessages","onSettled","onNodeAddress","newMessage","msg","emit","getUri","_callee2","_context2","io","micro","App","props","possibleConstructorReturn","getPrototypeOf","call","_handleAddMessage","e","preventDefault","id","nickname","settled","message","state","withMicro","setState","messages","c","boltheadCounter","concat","toConsumableArray","u","uri","msgs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","i","value","err","return","satoshiCounter","init","_this3","react_default","createElement","className","map","m","key","qrcode_react_lib_default","size","href","onSubmit","type","onChange","event","target","placeholder","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fec563dc.chunk.js","sourcesContent":["export default class Micro {\n  allowance : number = 0;\n  initialized : boolean = false;\n\n  init() {\n    document.addEventListener(\"message\", ({ data: rawData }:any) => {\n      if (!rawData) return;\n      let data = rawData.toLowerCase();\n      const appAllowancePrefix = \"appallowance:\";\n      if (data == \"initmicro\") {\n        this.initialized = true;\n        window.postMessage(\"initmicroack\", \"*\");\n      } else if (data.startsWith(appAllowancePrefix)) {\n        let newAllowance = data.substring(appAllowancePrefix.length);\n        this.allowance = parseInt(newAllowance);\n      }\n    });\n  };\n\n  canHandleWithMicro = (amount: number) => {\n    if (this.initialized && this.allowance > amount) {\n      return true;\n    }\n    return false;\n  };\n\n  handleWithMicro = (invoice: string, amount: number) => {\n    if (this.canHandleWithMicro(amount)) {\n      window.postMessage(\"lightning:\" + invoice, \"*\");\n      return true;\n    }\n    return false;\n  };\n}\n","import React, { Component } from \"react\";\nimport generateName from \"sillyname\";\nimport ChatBackend from \"./ChatBackend\";\nimport QRCode from \"qrcode.react\";\n\nimport \"./App.css\";\nimport Micro from \"./Micro\";\nimport Message from \"./Message\";\n\nlet moniker = \"\";\nif (localStorage && localStorage.getItem(\"chatMoniker\")) {\n  moniker = localStorage.getItem(\"chatMoniker\") || \"\";\n} else {\n  moniker = generateName();\n  localStorage.setItem(\"chatMoniker\", moniker);\n}\n\nconst backend = new ChatBackend();\nconst micro = new Micro();\n\nexport interface Props {\n\n}\n\ninterface State {\n  message: string;\n  uri?: string;\n  messages: Message[];\n  boltheadCounter?: number;\n  satoshiCounter?: number;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { message: \"\", messages: [] };\n  }\n\n  componentDidMount() {\n    // this._getUri();\n    backend.onUpdateBoltheadCounter((c) => this.setState({ boltheadCounter: c }));\n    backend.onNewMessage((msg: Message) =>\n      this.setState({ messages: [...this.state.messages, msg] }));\n    backend.onInitialMessages((msg: Message[]) => this.setState({ messages: msg }));\n    backend.onNodeAddress((u) => this.setState({ uri: u }));\n    backend.onSettled((id: number) => {\n      if (!id) return;\n      const msgs = this.state.messages;\n      for (let i of msgs) {\n        if (i.id == id) {\n          i.settled = true;\n          break;\n        }\n      }\n      this.setState({ messages: msgs });\n    })\n    backend.onSatoshiCounter((c) => this.setState({ satoshiCounter: c }))\n    micro.init();\n  }\n\n  _handleAddMessage = async e => {\n    e.preventDefault();\n    backend.newMessage({\n      id: -1, // doesn't matter, backend will set it.\n      nickname: moniker,\n      settled: false,\n      message: this.state.message,\n      invoice: \"\",\n      withMicro: false\n    });\n    this.setState({ message: \"\" });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <div className=\"App-moniker pa3 sans-serif\">\n            <span className=\"f3 sans-serif logo-text b\">rawtx chat</span>\n            <span className=\"logo-text f4 pl2\">\n              - lightning enabled chat app.\n            </span>\n            <span className=\"slogan-text f4 pt2 pl2 b\">\n              10 satoshis per message.\n            </span>\n            <div className=\"slogan-text f4 pt2\">\n              Your nickname is: {moniker}\n            </div>\n            <div className=\"counter ma1 mt2 pa1 pb0 ml0\">\n              <div className=\"dot\"></div>\n              <div className=\"ml2 logo-text f4 b\">\n                {this.state.boltheadCounter || 0} boltheads online right now\n              </div>\n            </div>\n            <div className=\"counter pa1 ml0\">\n              <div className=\"dot green-dot\"></div>\n              <div className=\"ml2 logo-text f4 b green-text\">{this.state.satoshiCounter || 0} satoshis spent</div>\n            </div>\n          </div>\n          <div className=\"App-messages\">\n            <div>\n              {this.state.messages &&\n                this.state.messages.map((m, i) => (\n                  <p key={i}>\n                    <div><b>{m.nickname}</b></div>\n                    <div className=\"pa3 ma1 ml0 mr0 br4 message-container\">\n                      {m.settled ? m.message : <i>Awaiting payment...</i>}\n                      {m.nickname == moniker && !m.settled && !m.withMicro ? (\n                        <span>\n                          <br />\n                          <div className=\"mt2\">\n                            <b>Your payment request</b>\n                          </div>\n                          <QRCode value={m.invoice} size={256} />\n                          <br />\n                          <div className=\"mv1\">\n                            <a href={\"lightning:\" + m.invoice} className=\"link\">{m.invoice}</a>\n                          </div>\n                          <br />\n                          <b>rawtx chat node's address</b>\n                          <br />\n                          <QRCode value={this.state.uri || \"\"} />\n                          <div>{this.state.uri}</div>\n                        </span>\n                      ) : (\n                          \"\"\n                        )}\n                      {m.nickname == moniker && m.withMicro && !m.settled ? (\n                        <span>\n                          <br />\n                          Settling payment with micro\n                      </span>\n                      ) : (\n                          \"\"\n                        )}\n                    </div>\n                  </p>\n                ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"form-container\">\n          <form onSubmit={this._handleAddMessage}>\n            <div className=\"message-form\">\n              <div className=\"App-message-entry\">\n                <input\n                  type=\"text\"\n                  value={this.state.message}\n                  onChange={event =>\n                    this.setState({ message: event.target.value })\n                  }\n                  placeholder=\"Message...\"\n                  className=\"pa3 ma2 w-100\"\n                />\n              </div>\n              <div className=\"App-submit-button ma3\">\n                <input type=\"submit\" value=\"Send\" />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import io from 'socket.io-client';\nimport Message from './Message';\n\nexport default class ChatBackend {\n  endpoint: string;\n  socket: SocketIOClient.Socket;\n  constructor() {\n    if (\n      process.env.NODE_ENV &&\n      process.env.NODE_ENV === \"development\"\n    ) {\n      this.endpoint = \"http://localhost:3001\";\n    } else {\n      this.endpoint = \"https://chat-backend.rawtx.com\";\n    }\n    this.socket = io(this.endpoint);\n  }\n\n  url = path => {\n    return this.endpoint + \"/\" + path;\n  };\n\n  getInvoice = async (memo: string) => {\n    const response = await fetch(this.url(\"invoice/\" + memo));\n    return response.json();\n  };\n\n  onUpdateBoltheadCounter = (fn: Function) => {\n    this.socket.on('updateBoltheadCounter', fn);\n  }\n\n  onSatoshiCounter = (fn: Function) => {\n    this.socket.on('satoshiCounter', fn);\n  }\n\n  onNewMessage = (fn: Function) => {\n    this.socket.on('newMessage', fn);\n  }\n\n  onInitialMessages = (fn: Function) => {\n    this.socket.on('initialMessages', fn);\n  }\n\n  onSettled = (fn: Function) => {\n    this.socket.on('settled', fn);\n  }\n\n  onNodeAddress = (fn: Function) => {\n    this.socket.on('nodeAddress', fn);\n  }\n\n  newMessage = (msg: Message) => {\n    this.socket.emit('newMessage', msg);\n  }\n\n  getUri = async () => {\n    const response = await fetch(this.url(\"pubkey\"));\n    const json = await response.json();\n    return json[\"uri\"];\n  };\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}